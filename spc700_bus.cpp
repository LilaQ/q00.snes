#include "spc700_bus.h"

u8 memory[0x10000];
const u8 IPL_BOOTROM[0x40] = {
	0xCD, 0xEF, 0xBD, 0xE8, 0x00, 0xC6, 0x1D, 0xD0, 0xFC, 0x8F, 0xAA, 0xF4, 0x8F, 0xBB, 0xF5, 0x78,
	0xCC, 0xF4, 0xD0, 0xFB, 0x2F, 0x19, 0xEB, 0xF4, 0xD0, 0xFC, 0x7E, 0xF4, 0xD0, 0x0B, 0xE4, 0xF5,
	0xCB, 0xF4, 0xD7, 0x00, 0xFC, 0xD0, 0xF3, 0xAB, 0x01, 0x10, 0xEF, 0x7E, 0xF4, 0x10, 0xEB, 0xBA,
	0xF6, 0xDA, 0x00, 0xBA, 0xF4, 0xC4, 0xF4, 0xDD, 0x5D, 0xD0, 0xDB, 0x1F, 0x00, 0x00, 0xC0, 0xFF
};

u8 FROM_SPU700[4] = { 0x00, 0x00, 0x00, 0x00 };
u8 FROM_CPU[4] = { 0x00, 0x00, 0x00, 0x00 };

void SPC700_MMU_RESET() {
	for (int i = 0; i < 10000; i++)
		memory[i] = 0x00;
	for (int i = 0; i < 0x40; i++) {
		memory[0xFFC0 + i] = IPL_BOOTROM[i];
	}
}

u8 SPC700_readFromMem(u16 addr) {
	switch (addr)
	{
	case 0x00F4: return FROM_CPU[0]; break;
	case 0x00F5: return FROM_CPU[1]; break;
	case 0x00F6: return FROM_CPU[2]; break;
	case 0x00F7: return FROM_CPU[3]; break;
	default:
		return memory[addr];
		break;
	}
}

void SPC700_writeToMem(u16 addr, u8 val) {
	switch (addr)
	{
	case 0x00F4: FROM_SPU700[0] = val; break;
	case 0x00F5: FROM_SPU700[1] = val; break;
	case 0x00F6: FROM_SPU700[2] = val; break;
	case 0x00F7: FROM_SPU700[3] = val; break;
	default:
		memory[addr] = val;
		break;
	}
}

void CPU_writeToSCP700(u8 register_id, u8 val) {
	FROM_CPU[register_id] = val;
}

u8 CPU_readFromSCP700(u8 register_id) {
	return FROM_SPU700[register_id];
}